import numpy as np
import os
import soundfile as sf
import librosa
from tqdm import tqdm
import re
import random
def sorted_alphanumeric(data):
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
    return sorted(data, key=alphanum_key)
source = os.listdir("Audio Files")
dirlist = sorted_alphanumeric(source)

L = random.sample(range(0,294),294)
L_train = L[0:180]
L_dev = L[180:234]
L_test = L[234:]


label = [
	# BL
	[[0,18],[18,22],[22,26]],	[[0,21],[21,26],[27,32]],	[[0,20],[22,26],[27,32]],	[[2,17],[17,21],[21,25]],	[[0,18],[18,22],[22,25]],
	[[0,17],[17,21],[21,23]],[[0,16],[16,20],[20,23]],[[0,15],[15,18],[18,22]],[[50,70],[0,5],[15,19]],[[21,38],[0,4],[5,8]],
	[[40,53],[0,5],[7,12]],[[41,61],[9,13],[14,18]],[[0,14],[15,19],[19,23]],[[0,11],[12,14],[14,16]],
	[[0,12],[13,16],[16,18]],[[8,27],[0,4],[4,8]],[[8,29],[0,4],[4,8]],[[10,33],[0,4],[5,9]],[[10,33],[0,5],[5,10]],[[9,29],[0,3],[4,8]],

	#LA1
	[[10,27],[0,5],[6,10]],[[8,26],[0,4],[5,8]],[[10,28],[0,5],[5,9]],[[9,24],[0,4],[4,9]],[[10,30],[0,5],[5,10]],
	#LA2 LA5 
	[[12,28],[0,5],[7,11]],[[9,33],[0,3],[6,9]],[[9,20],[0,4],[5,9]],[[9,28],[0,4],[4,8]],
	#LA7
	[[6,21],[0,3],[3,6]],[[9,21],[0,5],[5,9]],[[6,21],[0,3],[3,6]],[[10,30],[0,4],[6,9]],[[6,16],[0,3],[3,5]],[[6,18],[0,3],[3,6]],[[6,15],[0,3],[3,6]],
	[[6,19],[0,3],[3,6]],[[31,46],[0,5],[17,21]],
	#LA8
	[[22,38],[0,4],[12,15]],[[24,43],[0,4],[13,16]],
	#LA9
	[[10,23],[0,5],[5,9]],[[11,26],[0,4],[6,10]],[[7,21],[0,3],[3,7]],[[31,50],[2,6],[17,20]],[[29,45],[10,14],[24,27]],[[25,43],[5,8],[13,16]],[[24,40],[0,5],[13,16]],
	[[10,30],[0,4],[5,9]],[[8,27],[0,4],[5,8]],[[11,34],[1,5],[7,10]],[[12,32],[0,4],[7,10]],[[11,31],[0,4],[6,9]],[[12,30],[1,5],[7,10]],[[10,29],[0,4],[6,9]],[[10,27],[1,5],[6,9]],
		[[12,33],[1,4],[7,11]],[[11,29],[2,5],[6,10]],
	[[6,20],[0,3],[3,6]],[[6,18],[0,3],[3,6]],[[7,22],[0,3],[3,7]],[[7,20],[0,3],[3,6]],[[6,20],[0,3],[3,6]],[[6,22],[0,3],[3,6]],[[8,21],[0,4],[4,8]],[[4,21],[0,0],[0,4]],
	[[11,28],[0,5],[6,11]],[[28,45],[10,14],[14,18]],
	#NYU1
	[[0,16],[16,21],[0,0]],[[0,21],[21,23],[0,0]],[[0,17],[17,19],[0,0]],[[0,21],[21,24],[0,0]],[[0,17],[18,21],[0,0]],[[0,16],[17,20],[0,0]],[[0,15],[16,19],[0,0]],[[0,17],[17,20],[0,0]],
		[[16,27],[0,4],[0,0]],
	[[11,25],[0,4],[0,0]],[[17,33],[0,3],[0,0]],[[14,30],[0,4],[0,0]],[[0,11],[12,16],[0,0]],[[0,12],[13,17],[0,0]],[[0,12],[13,16],[0,0]],[[5,22],[0,4],[0,0]],[[7,24],[0,4],[0,0]],
	[[5,27],[0,4],[0,0]],[[4,21],[0,3],[0,0]],
	[[12,28],[0,5],[8,12]],[[3,33],[0,3],[0,0]],[[5,23],[0,4],[0,0]],[[4,20],[0,4],[0,0]],[[4,20],[0,4],[0,0]],[[3,24],[0,3],[0,0]],[[4,18],[0,3],[0,0]],[[4,19],[0,4],[0,0]],
		[[4,23],[0,3],[0,0]],[[6,22],[0,4],[0,0]],
	#PT01-10
	[[4,25],[0,4],[0,0]],[[4,23],[0,4],[0,0]],[[4,16],[0,3],[0,0]],[[2,15],[0,1],[0,0]],[[0,16],[17,19],[0,0]],
		[[3,14],[0,2],[0,0]],[[4,25],[0,4],[0,0]],[[2,20],[20,22],[0,0]],[[0,20],[20,24],[0,0]],[[0,17],[18,23],[0,0]],
	#PT11-20
	[[0,16],[16,19],[0,0]],[[0,11],[12,15],[0,0]],[[0,17],[17,20],[0,0]],[[0,17],[18,22],[0,0]],[[0,20],[21,24],[0,0]],
		[[0,17],[18,20],[0,0]],[[0,24],[25,28],[0,0]],[[0,18],[18,22],[0,0]],[[0,17],[17,19],[0,0]],[[0,19],[19,22],[0,0]],
	#PT22-30
	[[0,18],[18,21],[0,0]],[[0,17],[17,21],[0,0]],[[0,16],[16,20],[0,0]],[[0,19],[19,24],[0,0]],
		[[0,21],[21,24],[0,0]],[[0,20],[21,26],[0,0]],[[0,18],[18,21],[0,0]],[[0,17],[17,21],[0,0]],[[0,18],[18,21],[0,0]],
	#PT31-40
	[[0,15],[15,18],[0,0]],[[0,24],[25,28],[0,0]],[[0,16],[16,17],[0,0]],[[0,18],[19,21],[0,0]],[[0,22],[23,27],[0,0]],
		[[0,15],[16,18],[0,0]],[[0,17],[18,22],[0,0]],[[0,26],[27,31],[0,0]],[[0,13],[13,15],[0,0]],
	#PT41-50
	[[0,20],[21,25],[0,0]],[[0,13],[14,18],[0,0]],[[0,20],[21,24],[0,0]],[[0,20],[21,24],[0,0]],[[0,23],[24,27],[0,0]],
		[[0,21],[22,24],[0,0]],[[0,19],[20,22],[0,0]],[[0,15],[16,18],[0,0]],[[0,16],[18,21],[0,0]],[[0,19],[20,24],[0,0]],
	#PT51-60
	[[0,18],[19,21],[0,0]],[[0,14],[15,17],[0,0]],[[0,15],[16,19],[0,0]],[[0,25],[25,28],[0,0]],[[0,12],[13,15],[0,0]],
		[[0,17],[18,22],[0,0]],[[0,15],[15,17],[0,0]],[[0,21],[21,23],[0,0]],[[0,18],[18,22],[0,0]],
	#PT61-70
	[[3,20],[0,2],[0,0]],[[2,15],[0,2],[0,0]],[[4,22],[0,4],[0,0]],[[4,21],[0,3],[0,0]],[[4,25],[0,3],[0,0]],
		[[3,21],[0,2],[0,0]],[[4,24],[0,3],[0,0]],[[3,22],[0,2],[0,0]],[[4,16],[0,3],[0,0]],[[4,23],[0,3],[0,0]],
	#PT71-80
	[[3,18],[0,3],[0,0]],[[4,21],[0,3],[0,0]],[[4,16],[0,3],[0,0]],[[4,23],[0,3],[0,0]],[[4,22],[0,4],[0,0]],
		[[5,25],[0,4],[0,0]],[[5,23],[0,4],[0,0]],[[2,16],[0,2],[0,0]],[[2,14],[0,2],[0,0]],[[4,20],[0,3],[0,0]],
	#PT81-90
	[[1,25],[0,1],[0,0]],[[3,18],[0,3],[0,0]],[[3,18],[0,3],[0,0]],[[3,21],[0,3],[0,0]],[[3,19],[0,3],[0,0]],
		[[2,16],[0,2],[0,0]],[[7,26],[0,3],[0,0]],[[2,20],[0,2],[0,0]],[[4,28],[0,3],[0,0]],[[4,15],[0,3],[0,0]],
	#PT91-100
	[[5,22],[0,4],[0,0]],[[5,20],[0,4],[0,0]],[[3,17],[0,2],[0,0]],[[2,16],[0,1],[0,0]],[[3,17],[0,2],[0,0]],
		[[1,13],[0,1],[0,0]],[[3,19],[0,3],[0,0]],[[5,18],[0,4],[0,0]],[[2,22],[0,2],[0,0]],[[3,20],[0,3],[0,0]],
	#PT101-110
	[[4,16],[0,3],[0,0]],[[3,19],[0,2],[0,0]],[[2,13],[0,2],[0,0]],[[6,34],[0,4],[0,0]],[[4,18],[0,4],[0,0]],
		[[4,16],[0,3],[0,0]],[[5,20],[0,3],[0,0]],[[3,17],[0,3],[0,0]],[[6,21],[0,4],[0,0]],
	#PT111-120
	[[3,16],[0,3],[0,0]],[[2,14],[0,1],[0,0]],[[4,18],[0,2],[0,0]],[[0,14],[14,15],[0,0]],[[0,16],[16,19],[0,0]],
		[[0,14],[15,16],[0,0]],[[0,18],[18,20],[0,0]],[[0,11],[11.5,-1],[0,0]],[[0,9],[10,11],[0,0]],[[0,12],[13,15],[0,0]],
	#PT121-130
	[[0,12],[13,16],[0,0]],[[0,13],[13,15],[0,0]],[[0,4],[0,0],[0,0]],[[0,17],[18,20],[0,0]],[[0,15],[16,18],[0,0]],
		[[0,14],[15,-1],[0,0]],[[0,13],[14,15],[0,0]],[[0,8],[9,-1],[0,0]],[[0,10],[11,13],[0,0]],[[0,13],[13,-1],[0,0]],
	#PT131-137
	[[0,18],[19,-1],[0,0]],[[0,12],[13,-1],[0,0]],[[0,11],[11.5,-1],[0,0]],[[0,10],[10,14],[0,0]],[[0,13],[13,-1],[0,0]],
		[[0,12],[13,-1],[0,0]],[[0,12],[13,-1],[0,0]],
	#SJ1
	[[10,27],[0,4],[5,9]],[[10,33],[0,4],[5,9]],[[8,27],[0,3],[4,7]],
	#SJ2001 SJ2010
	[[11,25],[0,5],[6,10]],[[13,24],[0,5],[7,11]],[[12,26],[0,5],[6,10]],[[12,24],[0,5],[6,11]],
		[[15,30],[0,5],[7,12]],[[14,34],[0,5],[7,12]],[[17,34],[0,5],[7,12]],[[12,26],[0,5],[6,11]],[[13,31],[0,5],[8,12]],
	#SJ2011 SJ2017
	[[12,28],[0,5],[7,11]],[[12,30],[0,5],[6,11]],[[11,26],[0,4],[6,10]],[[12,24],[0,4],[6,11]],[[9,25],[0,4],[5,8]],
		[[11,27],[0,4],[6,10]],[[13,28],[0,4],[8,12]],
	#SJ4001 SJ4009
	[[11,23],[0,4],[5,10]],[[12,29],[0,4],[6,10]],[[8,31],[0,3],[4,7]],[[9,30],[0,4],[5,8]],[[11,33],[0,4],[6,10]],
		[[10,32],[0,4],[4,9]],[[12,24],[0,4],[6,11]],[[11,25],[0,5],[5,10]],[[11,28],[0,5],[6,10]],
	#SJ5001 SJ5010
	[[12,30],[0,5],[7,11]],[[9,26],[0,4],[5,8]],[[12,33],[0,5],[7,11]],[[11,29],[0,5],[6,10]],[[12,23],[0,5],[7,11]],
		[[10,22],[0,5],[5,9]],[[11,23],[0,5],[6,10]],[[13,25],[0,5],[7,12]],[[13,29],[0,5],[6,11]],[[11,21],[0,5],[6,10]],
	#SJ5011 SJ5020
	[[11,25],[0,5],[6,10]],[[14,31],[0,5],[8,12]],[[12,30],[0,5],[7,11]],[[15,33],[0,5],[8,13]],
			[[13,31],[0,5],[7,11]],[[13,29],[0,5],[8,12]],[[12,32],[0,5],[7,11]],[[13,32],[0,5],[7,12]],[[13,30],[0,5],[7,11]],
	#SJ5021
	[[12,30],[2,6],[7,10]],
	#SJ6001
	[[13,25],[0,5],[6,11]],[[14,26],[0,5],[7,12]],[[12,24],[0,5],[6,11]],[[13,27],[0,5],[7,12]],[[14,26],[0,5],[7,13]],
		[[14,28],[0,5],[6,12]],[[12,23],[0,6],[6,12]],[[13,22],[0,6],[6,12]],
	#SJ7001
	[[16,32],[0,6],[8,14]],
	#SJ30001
	[[7,20],[0,3],[4,7]],[[10,20],[0,4],[4,9]],[[12,23],[0,5],[6,11]],[[12,24],[0,5],[6,11]],[[12,25],[0,5],[6,11]],
		[[12,26],[0,5],[5,11]],[[12,26],[0,5],[6,11]],[[12,28],[0,5],[6,11]],
]


for i in tqdm(L_train):
	obj = label[i]
	interval_speech =obj[0]
	interval_a = obj[1]
	interval_i = obj[2]
	data,sr = sf.read(os.path.join("Audio Files",dirlist[i]))
	if len(data.shape)==2:
		data = np.average(data,axis=1)
	data_16k = librosa.resample(data,sr,16000)
	if interval_speech[1]==-1:
		data_slice = data_16k[int(16000*interval_speech[0]):]
		sf.write(os.path.join("data/16k/train_speech/",dirlist[i].split(".")[0]  + ".wav"), data_slice,16000)
	else:
		data_slice = data_16k[16000*interval_speech[0]:16000*interval_speech[1]]
		sf.write(os.path.join("data/16k/train_speech/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)

	if interval_a[1] - interval_a[0]!=0:
		if interval_a[1]==-1:
			data_slice = data_16k[int(16000*interval_a[0]):]
			sf.write(os.path.join("data/16k/train_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_a[0]:16000*interval_a[1]]
			sf.write(os.path.join("data/16k/train_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)

	if interval_i[1] - interval_i[0]!=0:
		if interval_i[1]==-1:
			data_slice = data_16k[int(16000*interval_i[0]):]
			sf.write(os.path.join("data/16k/train_i/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_i[0]:16000*interval_i[1]]
			sf.write(os.path.join("data/16k/train_i/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)


for i in tqdm(L_dev):
	obj = label[i]
	interval_speech =obj[0]
	interval_a = obj[1]
	interval_i = obj[2]

	data,sr = sf.read(os.path.join("Audio Files",dirlist[i]))
	if len(data.shape)==2:
		data = np.average(data,axis=1)
	data_16k = librosa.resample(data,sr,16000)

	if interval_speech[1]==-1:
		data_slice = data_16k[int(16000*interval_speech[0]):]
		sf.write(os.path.join("data/16k/dev_speech/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
	else:
		data_slice = data_16k[16000*interval_speech[0]:16000*interval_speech[1]]
		sf.write(os.path.join("data/16k/dev_speech/",dirlist[i].split(".")[0]  + ".wav"), data_slice,16000)

	if interval_a[1] - interval_a[0]!=0:
		if interval_a[1]==-1:
			data_slice = data_16k[int(16000*interval_a[0]):]
			sf.write(os.path.join("data/16k/dev_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_a[0]:16000*interval_a[1]]
			sf.write(os.path.join("data/16k/dev_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)

	if interval_i[1] - interval_i[0]!=0:
		if interval_i[1]==-1:
			data_slice = data_16k[int(16000*interval_i[0]):]
			sf.write(os.path.join("data/16k/dev_i/",dirlist[i].split(".")[0]  + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_i[0]:16000*interval_i[1]]
			sf.write(os.path.join("data/16k/dev_i/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)


for i in tqdm(L_test):
	obj = label[i]
	interval_speech =obj[0]
	interval_a = obj[1]
	interval_i = obj[2]

	data,sr = sf.read(os.path.join("Audio Files",dirlist[i]))
	if len(data.shape)==2:
		data = np.average(data,axis=1)
	data_16k = librosa.resample(data,sr,16000)

	if interval_speech[1]==-1:
		data_slice = data_16k[int(16000*interval_speech[0]):]
		sf.write(os.path.join("data/16k/test_speech/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
	else:
		data_slice = data_16k[16000*interval_speech[0]:16000*interval_speech[1]]
		sf.write(os.path.join("data/16k/test_speech/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)

	if interval_a[1] - interval_a[0]!=0:
		if interval_a[1]==-1:
			data_slice = data_16k[int(16000*interval_a[0]):]
			sf.write(os.path.join("data/16k/test_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_a[0]:16000*interval_a[1]]
			sf.write(os.path.join("data/16k/test_a/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)

	if interval_i[1] - interval_i[0]!=0:
		if interval_i[1]==-1:
			data_slice = data_16k[int(16000*interval_i[0]):]
			sf.write(os.path.join("data/16k/test_i/",dirlist[i].split(".")[0] + ".wav"), data_slice,16000)
		else:
			data_slice = data_16k[16000*interval_i[0]:16000*interval_i[1]]
			sf.write(os.path.join("data/16k/test_i/",dirlist[i].split(".")[0]  + ".wav"), data_slice,16000)
